Index: app/src/main/assets/shader/oes.sh
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/assets/shader/oes.sh	(date 1617205603562)
+++ app/src/main/assets/shader/oes.sh	(date 1617205603562)
@@ -0,0 +1,10 @@
+attribute vec4 vPosition;
+attribute vec2 vCoord;
+uniform mat4 vMatrix;
+uniform mat4 vCoordMatrix;
+varying vec2 textureCoordinate;
+
+void main(){
+    gl_Position = vMatrix*vPosition;
+    textureCoordinate = (vCoordMatrix*vec4(vCoord,0,1)).xy;
+}
Index: app/src/main/java/com/example/myapplication/CameraView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/myapplication/CameraView.java	(date 1617232901681)
+++ app/src/main/java/com/example/myapplication/CameraView.java	(date 1617232901681)
@@ -0,0 +1,74 @@
+package com.example.myapplication;
+
+import android.content.Context;
+import android.graphics.Point;
+import android.graphics.SurfaceTexture;
+import android.opengl.EGLConfig;
+import android.opengl.GLES20;
+import android.opengl.GLSurfaceView;
+import android.util.AttributeSet;
+
+import javax.microedition.khronos.opengles.GL10;
+
+public class CameraView extends GLSurfaceView implements GLSurfaceView.Renderer {
+    private KitkatCamera mCamera2;
+    private CameraDrawer mCameraDrawer;
+    private int cameraId = 1;
+
+    private Runnable mRunnable;
+
+    public CameraView(Context context) {
+        this(context, null);
+    }
+
+    public CameraView(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        init();
+    }
+
+    private void init() {
+        setEGLContextClientVersion(2);
+        setRenderer(this);
+        setRenderMode(RENDERMODE_WHEN_DIRTY); //rendermode  when  dirty
+        mCamera2 = new KitkatCamera();
+        mCameraDrawer = new CameraDrawer(getResources());
+    }
+
+    @Override
+    public void onSurfaceCreated(GL10 gl, javax.microedition.khronos.egl.EGLConfig config) {
+        mCameraDrawer.onSurfaceCreated(gl, config);
+        if (mRunnable != null) {
+            mRunnable.run();
+            mRunnable = null;
+        }
+        mCamera2.open(cameraId);
+        mCameraDrawer.setCameraId(cameraId);
+        Point point = mCamera2.getPreviewSize();
+        mCameraDrawer.setDataSize(point.x, point.y);
+        mCamera2.setPreviewTexture(mCameraDrawer.getSurfaceTexture());
+        mCameraDrawer.getSurfaceTexture().setOnFrameAvailableListener(new SurfaceTexture.OnFrameAvailableListener() {
+            @Override
+            public void onFrameAvailable(SurfaceTexture surfaceTexture) {
+                requestRender();
+            }
+        });
+        mCamera2.preview();
+    }
+
+    @Override
+    public void onSurfaceChanged(GL10 gl, int width, int height) {
+        mCameraDrawer.setViewSize(width, height);
+        GLES20.glViewport(0, 0, width, height);
+    }
+
+    @Override
+    public void onDrawFrame(GL10 gl) {
+        mCameraDrawer.onDrawFrame(gl);
+    }
+
+    @Override
+    public void onPause() {
+        super.onPause();
+        mCamera2.close();
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/example/myapplication/KitkatCamera.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/myapplication/KitkatCamera.java	(date 1617232901713)
+++ app/src/main/java/com/example/myapplication/KitkatCamera.java	(date 1617232901713)
@@ -0,0 +1,201 @@
+package com.example.myapplication;
+
+import java.io.IOException;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.List;
+
+import android.graphics.Point;
+import android.graphics.SurfaceTexture;
+import android.hardware.Camera;
+import android.util.Log;
+
+/**
+ * Description:
+ */
+public class KitkatCamera implements ICamera {
+
+    private Config mConfig;
+    private Camera mCamera;
+    private CameraSizeComparator sizeComparator;
+
+    private Camera.Size picSize;
+    private Camera.Size preSize;
+
+    private Point mPicSize;
+    private Point mPreSize;
+
+    public KitkatCamera() {
+        this.mConfig = new Config();
+        mConfig.minPreviewWidth = 720;
+        mConfig.minPictureWidth = 720;
+        mConfig.rate = 1.778f;
+        sizeComparator = new CameraSizeComparator();
+    }
+
+    @Override
+    public boolean open(int cameraId) {
+        mCamera = Camera.open(cameraId);
+        if (mCamera != null) {
+            Camera.Parameters param = mCamera.getParameters();
+            picSize = getPropPictureSize(param.getSupportedPictureSizes(), mConfig.rate,
+                    mConfig.minPictureWidth);
+            preSize = getPropPreviewSize(param.getSupportedPreviewSizes(), mConfig.rate, mConfig
+                    .minPreviewWidth);
+            param.setPictureSize(picSize.width, picSize.height);
+            param.setPreviewSize(preSize.width, preSize.height);
+            mCamera.setParameters(param);
+            Camera.Size pre = param.getPreviewSize();
+            Camera.Size pic = param.getPictureSize();
+            mPicSize = new Point(pic.height, pic.width);
+            mPreSize = new Point(pre.height, pre.width);
+            Log.e("wuwang", "camera previewSize:" + mPreSize.x + "/" + mPreSize.y);
+            return true;
+        }
+        return false;
+    }
+
+    public void setPreviewTexture(SurfaceTexture texture) {
+        if (mCamera != null) {
+            try {
+                mCamera.setPreviewTexture(texture);
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        }
+    }
+
+    @Override
+    public void setConfig(Config config) {
+        this.mConfig = config;
+    }
+
+    @Override
+    public boolean preview() {
+        if (mCamera != null) {
+            mCamera.startPreview();
+        }
+        return false;
+    }
+
+
+    @Override
+    public boolean switchTo(int cameraId) {
+        close();
+        open(cameraId);
+        return false;
+    }
+
+    @Override
+    public void takePhoto(TakePhotoCallback callback) {
+
+    }
+
+    @Override
+    public boolean close() {
+        if (mCamera != null) {
+            try {
+                mCamera.stopPreview();
+                mCamera.release();
+            } catch (Exception e) {
+                e.printStackTrace();
+            }
+        }
+        return false;
+    }
+
+    @Override
+    public Point getPreviewSize() {
+        return mPreSize;
+    }
+
+    @Override
+    public Point getPictureSize() {
+        return mPicSize;
+    }
+
+    @Override
+    public void setOnPreviewFrameCallback(final PreviewFrameCallback callback) {
+        if (mCamera != null) {
+            mCamera.setPreviewCallback(new Camera.PreviewCallback() {
+                @Override
+                public void onPreviewFrame(byte[] data, Camera camera) {
+                    callback.onPreviewFrame(data, mPreSize.x, mPreSize.y);
+                }
+            });
+        }
+    }
+
+    public void addBuffer(byte[] buffer) {
+        if (mCamera != null) {
+            mCamera.addCallbackBuffer(buffer);
+        }
+    }
+
+    public void setOnPreviewFrameCallbackWithBuffer(final PreviewFrameCallback callback) {
+        if (mCamera != null) {
+            Log.e("wuwang", "Camera set CallbackWithBuffer");
+            mCamera.setPreviewCallbackWithBuffer(new Camera.PreviewCallback() {
+                @Override
+                public void onPreviewFrame(byte[] data, Camera camera) {
+                    callback.onPreviewFrame(data, mPreSize.x, mPreSize.y);
+                }
+            });
+        }
+    }
+
+
+    private Camera.Size getPropPreviewSize(List<Camera.Size> list, float th, int minWidth) {
+        Collections.sort(list, sizeComparator);
+
+        int i = 0;
+        for (Camera.Size s : list) {
+            if ((s.height >= minWidth) && equalRate(s, th)) {
+                break;
+            }
+            i++;
+        }
+        if (i == list.size()) {
+            i = 0;
+        }
+        return list.get(i);
+    }
+
+    private Camera.Size getPropPictureSize(List<Camera.Size> list, float th, int minWidth) {
+        Collections.sort(list, sizeComparator);
+
+        int i = 0;
+        for (Camera.Size s : list) {
+            if ((s.height >= minWidth) && equalRate(s, th)) {
+                break;
+            }
+            i++;
+        }
+        if (i == list.size()) {
+            i = 0;
+        }
+        return list.get(i);
+    }
+
+    private boolean equalRate(Camera.Size s, float rate) {
+        float r = (float) (s.width) / (float) (s.height);
+        if (Math.abs(r - rate) <= 0.03) {
+            return true;
+        } else {
+            return false;
+        }
+    }
+
+    private class CameraSizeComparator implements Comparator<Camera.Size> {
+        public int compare(Camera.Size lhs, Camera.Size rhs) {
+            // TODO Auto-generated method stub
+            if (lhs.height == rhs.height) {
+                return 0;
+            } else if (lhs.height > rhs.height) {
+                return 1;
+            } else {
+                return -1;
+            }
+        }
+    }
+}
Index: app/src/main/assets/shader/oes_f.sh
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/assets/shader/oes_f.sh	(date 1617205648801)
+++ app/src/main/assets/shader/oes_f.sh	(date 1617205648801)
@@ -0,0 +1,6 @@
+precision mediump float;
+varying vec2 textureCoordinate;
+uniform samplerExternalOES vTexture;
+void main() {
+    gl_FragColor = texture2D( vTexture, textureCoordinate );
+}
Index: app/src/main/java/com/example/myapplication/CameraDrawer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/myapplication/CameraDrawer.java	(date 1617232901697)
+++ app/src/main/java/com/example/myapplication/CameraDrawer.java	(date 1617232901697)
@@ -0,0 +1,107 @@
+package com.example.myapplication;
+
+import java.nio.ByteBuffer;
+import java.nio.ByteOrder;
+import java.nio.FloatBuffer;
+import java.nio.IntBuffer;
+import java.util.Arrays;
+
+import javax.microedition.khronos.egl.EGLConfig;
+import javax.microedition.khronos.opengles.GL10;
+
+import android.content.res.Resources;
+import android.graphics.Bitmap;
+import android.graphics.SurfaceTexture;
+import android.opengl.GLES11Ext;
+import android.opengl.GLES20;
+import android.opengl.GLSurfaceView;
+import android.opengl.Matrix;
+import android.util.Log;
+
+import com.example.myapplication.learn.framebuffer.demo2.AFilter;
+import com.example.myapplication.learn.framebuffer.demo2.Gl2Utils;
+
+/**
+ * Description:
+ */
+public class CameraDrawer implements GLSurfaceView.Renderer {
+
+    private float[] matrix = new float[16];
+    private SurfaceTexture surfaceTexture;
+    private int width, height;
+    private int dataWidth, dataHeight;
+    private AFilter mOesFilter;
+    private int cameraId = 1;
+
+    public CameraDrawer(Resources res) {
+        mOesFilter = new OesFilter(res);
+    }
+
+    public void setDataSize(int dataWidth, int dataHeight) {
+        this.dataWidth = dataWidth;
+        this.dataHeight = dataHeight;
+        calculateMatrix();
+    }
+
+    public void setViewSize(int width, int height) {
+        this.width = width;
+        this.height = height;
+        calculateMatrix();
+    }
+
+    private void calculateMatrix() {
+        Gl2Utils.getShowMatrix(matrix, this.dataWidth, this.dataHeight, this.width, this.height);
+        if (cameraId == 1) {
+            Gl2Utils.flip(matrix, true, false);
+            Gl2Utils.rotate(matrix, 90);
+        } else {
+            Gl2Utils.rotate(matrix, 270);
+        }
+        mOesFilter.setMatrix(matrix);
+    }
+
+    public SurfaceTexture getSurfaceTexture() {
+        return surfaceTexture;
+    }
+
+    public void setCameraId(int id) {
+        this.cameraId = id;
+        calculateMatrix();
+    }
+
+    @Override
+    public void onSurfaceCreated(GL10 gl, EGLConfig config) {
+        int texture = createTextureID();
+        surfaceTexture = new SurfaceTexture(texture);
+        mOesFilter.create();
+        mOesFilter.setTextureId(texture);
+    }
+
+    @Override
+    public void onSurfaceChanged(GL10 gl, int width, int height) {
+        setViewSize(width, height);
+    }
+
+    @Override
+    public void onDrawFrame(GL10 gl) {
+        if (surfaceTexture != null) {
+            surfaceTexture.updateTexImage();
+        }
+        mOesFilter.draw();
+    }
+
+    private int createTextureID() {
+        int[] texture = new int[1];
+        GLES20.glGenTextures(1, texture, 0);
+        GLES20.glBindTexture(GLES11Ext.GL_TEXTURE_EXTERNAL_OES, texture[0]);
+        GLES20.glTexParameterf(GLES11Ext.GL_TEXTURE_EXTERNAL_OES,
+                GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_LINEAR);
+        GLES20.glTexParameterf(GLES11Ext.GL_TEXTURE_EXTERNAL_OES,
+                GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
+        GLES20.glTexParameteri(GLES11Ext.GL_TEXTURE_EXTERNAL_OES,
+                GL10.GL_TEXTURE_WRAP_S, GL10.GL_CLAMP_TO_EDGE);
+        GLES20.glTexParameteri(GLES11Ext.GL_TEXTURE_EXTERNAL_OES,
+                GL10.GL_TEXTURE_WRAP_T, GL10.GL_CLAMP_TO_EDGE);
+        return texture[0];
+    }
+}
Index: app/src/main/java/com/example/myapplication/learn/camra/CamraDemo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.myapplication.learn.camra;\r\n\r\nimport android.graphics.SurfaceTexture;\r\nimport android.hardware.Camera;\r\nimport android.opengl.GLES11Ext;\r\nimport android.opengl.GLES20;\r\nimport android.opengl.GLES30;\r\n\r\nimport com.example.myapplication.learn.shape.base.Shape;\r\n\r\nimport java.io.IOException;\r\nimport java.nio.ByteBuffer;\r\nimport java.nio.ByteOrder;\r\nimport java.nio.FloatBuffer;\r\nimport java.nio.ShortBuffer;\r\n\r\nimport javax.microedition.khronos.opengles.GL10;\r\n\r\npublic class CamraDemo extends Shape {\r\n    private final FloatBuffer vertexBuffer, mTexVertexBuffer;\r\n    private final ShortBuffer mVertexIndexBuffer;\r\n    private int mProgram;\r\n    private int textureId;\r\n    private float[] POSITION_VERTEX = new float[]{\r\n            0f, 0f, 0f,     //顶点坐标V0\r\n            1f, 1f, 0f,     //顶点坐标V1\r\n            -1f, 1f, 0f,    //顶点坐标V2\r\n            -1f, -1f, 0f,   //顶点坐标V3\r\n            1f, -1f, 0f     //顶点坐标V4\r\n    };\r\n    /**\r\n     * 纹理坐标\r\n     * (s,t)\r\n     */\r\n    private static final float[] TEX_VERTEX = {\r\n            0.5f, 0.5f, //纹理坐标V0\r\n            1f, 1f,     //纹理坐标V1\r\n            0f, 1f,     //纹理坐标V2\r\n            0f, 0.0f,   //纹理坐标V3\r\n            1f, 0.0f    //纹理坐标V4\r\n    };\r\n\r\n    /**\r\n     * 索引\r\n     */\r\n    private static final short[] VERTEX_INDEX = {\r\n            0, 1, 2,  //V0,V1,V2 三个顶点组成一个三角形\r\n            0, 2, 3,  //V0,V2,V3 三个顶点组成一个三角形\r\n            0, 3, 4,  //V0,V3,V4 三个顶点组成一个三角形\r\n            0, 4, 1   //V0,V4,V1 三个顶点组成一个三角形\r\n    };\r\n    /**\r\n     * 相机ID\r\n     */\r\n    private int mCameraId;\r\n    /**\r\n     * 相机实例\r\n     */\r\n    private Camera mCamera;\r\n    /**\r\n     * Surface\r\n     */\r\n    private SurfaceTexture mSurfaceTexture;\r\n\r\n    /**\r\n     * 矩阵索引\r\n     */\r\n    private int uTextureSamplerLocation;\r\n\r\n    public CamraDemo(){\r\n       this.mCameraId = Camera.CameraInfo.CAMERA_FACING_FRONT;\r\n       mCamera = Camera.open(mCameraId);\r\n        //分配内存空间,每个浮点型占4字节空间\r\n        vertexBuffer = ByteBuffer.allocateDirect(POSITION_VERTEX.length * 4).order(ByteOrder.nativeOrder()).asFloatBuffer();\r\n        //传入指定的坐标数据\r\n        vertexBuffer.put(POSITION_VERTEX);\r\n        vertexBuffer.position(0);\r\n        mTexVertexBuffer = ByteBuffer.allocateDirect(TEX_VERTEX.length * 4).order(ByteOrder.nativeOrder()).asFloatBuffer().put(TEX_VERTEX);\r\n        mTexVertexBuffer.position(0);\r\n        mVertexIndexBuffer = ByteBuffer.allocateDirect(VERTEX_INDEX.length * 2).order(ByteOrder.nativeOrder()).asShortBuffer().put(VERTEX_INDEX);\r\n        mVertexIndexBuffer.position(0);\r\n    }\r\n\r\n    @Override\r\n    public void create() {\r\n        String vv = \"#version 300 es\\n\" +\r\n                \"layout (location = 0) in vec4 vPosition;\\n\" +\r\n                \"layout (location = 1) in vec4 aTextureCoord;\\n\" +\r\n                \"//纹理矩阵\\n\" +\r\n                \"out vec2 yuvTexCoords;\\n\" +\r\n                \"void main() {\\n\" +\r\n                \"     gl_Position  = vPosition;\\n\" +\r\n                \"     gl_PointSize = 10.0;\\n\" +\r\n                \"     //只保留x和y分量\\n\" +\r\n                \"     yuvTexCoords = aTextureCoord;\\n\" +\r\n                \"}\";\r\n        String vvv = \"#version 300 es\\n\" +\r\n                \"//OpenGL ES3.0外部纹理扩展\\n\" +\r\n                \"#extension GL_OES_EGL_image_external_essl3 : require\\n\" +\r\n                \"precision mediump float;\\n\" +\r\n                \"uniform samplerExternalOES yuvTexSampler;\\n\" +\r\n                \"in vec2 yuvTexCoords;\\n\" +\r\n                \"out vec4 vFragColor;\\n\" +\r\n                \"void main() {\\n\" +\r\n                \"     vFragColor = texture(yuvTexSampler,yuvTexCoords);\\n\" +\r\n                \"}\";\r\n\r\n        //设置背景颜色\r\n        GLES30.glClearColor(0.5f, 0.5f, 0.5f, 0.5f);\r\n        //编译\r\n        int vertexShader = loadShader(GLES20.GL_VERTEX_SHADER,vv);\r\n        int fragmentShader = loadShader(GLES20.GL_FRAGMENT_SHADER,vvv);\r\n        //链接程序片段\r\n        mProgram = GLES20.glCreateProgram();\r\n        GLES20.glAttachShader(mProgram,vertexShader);\r\n        GLES20.glAttachShader(mProgram,fragmentShader);\r\n        GLES20.glLinkProgram(mProgram);\r\n        //程序加入到环境里面\r\n        GLES20.glUseProgram(mProgram);\r\n\r\n        //获取Shader中定义的变量在program中的位置\r\n        uTextureSamplerLocation = GLES30.glGetUniformLocation(mProgram, \"yuvTexSampler\");\r\n\r\n        //加载纹理\r\n        textureId = loadTexture();\r\n        //加载SurfaceTexture\r\n        loadSurfaceTexture(textureId);\r\n    }\r\n\r\n    @Override\r\n    public void render() {\r\n        //使用程序片段\r\n        GLES30.glUseProgram(mProgram);\r\n        //更新纹理图像\r\n        mSurfaceTexture.updateTexImage();\r\n        //激活纹理单元0\r\n        GLES30.glActiveTexture(GLES30.GL_TEXTURE0);\r\n        //绑定外部纹理到纹理单元0\r\n        GLES30.glBindTexture(GLES11Ext.GL_TEXTURE_EXTERNAL_OES, textureId);\r\n        //将此纹理单元床位片段着色器的uTextureSampler外部纹理采样器\r\n        GLES30.glUniform1i(uTextureSamplerLocation, 0);\r\n        //将纹理矩阵传给片段着色器\r\n        GLES30.glEnableVertexAttribArray(0);\r\n        GLES30.glVertexAttribPointer(0, 3, GLES30.GL_FLOAT, false, 0, vertexBuffer);\r\n\r\n        GLES30.glEnableVertexAttribArray(1);\r\n        GLES30.glVertexAttribPointer(1, 2, GLES30.GL_FLOAT, false, 0, mTexVertexBuffer);\r\n\r\n        // 绘制\r\n        GLES20.glDrawElements(GLES20.GL_TRIANGLES, VERTEX_INDEX.length, GLES20.GL_UNSIGNED_SHORT, mVertexIndexBuffer);\r\n\r\n    }\r\n\r\n    @Override\r\n    public void surfaceChange(int width, int height) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void dispose() {\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * 加载外部纹理\r\n     * @return\r\n     */\r\n    public int loadTexture() {\r\n        int[] tex = new int[1];\r\n        //创建一个纹理\r\n        GLES30.glGenTextures(1, tex, 0);\r\n        //绑定到外部纹理上\r\n        GLES30.glBindTexture(GLES11Ext.GL_TEXTURE_EXTERNAL_OES, tex[0]);\r\n        //设置纹理过滤参数\r\n        GLES30.glTexParameterf(GLES11Ext.GL_TEXTURE_EXTERNAL_OES, GLES30.GL_TEXTURE_MIN_FILTER, GLES30.GL_NEAREST);\r\n        GLES30.glTexParameterf(GLES11Ext.GL_TEXTURE_EXTERNAL_OES, GLES30.GL_TEXTURE_MAG_FILTER, GLES30.GL_LINEAR);\r\n        GLES30.glTexParameterf(GLES11Ext.GL_TEXTURE_EXTERNAL_OES, GLES30.GL_TEXTURE_WRAP_S, GLES30.GL_CLAMP_TO_EDGE);\r\n        GLES30.glTexParameterf(GLES11Ext.GL_TEXTURE_EXTERNAL_OES, GLES30.GL_TEXTURE_WRAP_T, GLES30.GL_CLAMP_TO_EDGE);\r\n        //解除纹理绑定\r\n        GLES30.glBindTexture(GLES11Ext.GL_TEXTURE_EXTERNAL_OES, 0);\r\n        return tex[0];\r\n    }\r\n\r\n    public boolean loadSurfaceTexture(int textureId) {\r\n        //根据纹理ID创建SurfaceTexture\r\n        mSurfaceTexture = new SurfaceTexture(textureId);\r\n        //设置SurfaceTexture作为相机预览输出\r\n        try {\r\n            mCamera.setPreviewTexture(mSurfaceTexture);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n            return false;\r\n        }\r\n        //开启相机预览\r\n        mCamera.startPreview();\r\n        return true;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/myapplication/learn/camra/CamraDemo.java	(revision f1c64a600a67932c68b33162f6b99c27bd73f140)
+++ app/src/main/java/com/example/myapplication/learn/camra/CamraDemo.java	(date 1617233746117)
@@ -81,26 +81,25 @@
         mVertexIndexBuffer.position(0);
     }
 
+    private int xx1;
+    private int xx2;
+
+
     @Override
     public void create() {
-        String vv = "#version 300 es\n" +
-                "layout (location = 0) in vec4 vPosition;\n" +
-                "layout (location = 1) in vec4 aTextureCoord;\n" +
-                "//纹理矩阵\n" +
-                "out vec2 yuvTexCoords;\n" +
+        String vv =
+                "attribute vec4 vPosition;\n" +
+                "attribute vec4 aTextureCoord;\n" +
+                "varying vec2 yuvTexCoords;\n" +
                 "void main() {\n" +
                 "     gl_Position  = vPosition;\n" +
                 "     gl_PointSize = 10.0;\n" +
-                "     //只保留x和y分量\n" +
                 "     yuvTexCoords = aTextureCoord;\n" +
                 "}";
-        String vvv = "#version 300 es\n" +
-                "//OpenGL ES3.0外部纹理扩展\n" +
-                "#extension GL_OES_EGL_image_external_essl3 : require\n" +
+        String vvv =
                 "precision mediump float;\n" +
                 "uniform samplerExternalOES yuvTexSampler;\n" +
-                "in vec2 yuvTexCoords;\n" +
-                "out vec4 vFragColor;\n" +
+                " vec2 yuvTexCoords;\n" +
                 "void main() {\n" +
                 "     vFragColor = texture(yuvTexSampler,yuvTexCoords);\n" +
                 "}";
@@ -117,6 +116,9 @@
         GLES20.glLinkProgram(mProgram);
         //程序加入到环境里面
         GLES20.glUseProgram(mProgram);
+        xx1 = GLES20.glGetAttribLocation(mProgram,"vPosition");
+        xx2 = GLES20.glGetAttribLocation(mProgram,"aTextureCoord");
+
 
         //获取Shader中定义的变量在program中的位置
         uTextureSamplerLocation = GLES30.glGetUniformLocation(mProgram, "yuvTexSampler");
@@ -140,11 +142,10 @@
         //将此纹理单元床位片段着色器的uTextureSampler外部纹理采样器
         GLES30.glUniform1i(uTextureSamplerLocation, 0);
         //将纹理矩阵传给片段着色器
-        GLES30.glEnableVertexAttribArray(0);
-        GLES30.glVertexAttribPointer(0, 3, GLES30.GL_FLOAT, false, 0, vertexBuffer);
-
-        GLES30.glEnableVertexAttribArray(1);
-        GLES30.glVertexAttribPointer(1, 2, GLES30.GL_FLOAT, false, 0, mTexVertexBuffer);
+        GLES30.glEnableVertexAttribArray(xx1);
+        GLES30.glVertexAttribPointer(xx1, 3, GLES30.GL_FLOAT, false, 0, vertexBuffer);
+        GLES30.glEnableVertexAttribArray(xx2);
+        GLES30.glVertexAttribPointer(xx2, 2, GLES30.GL_FLOAT, false, 0, mTexVertexBuffer);
 
         // 绘制
         GLES20.glDrawElements(GLES20.GL_TRIANGLES, VERTEX_INDEX.length, GLES20.GL_UNSIGNED_SHORT, mVertexIndexBuffer);
Index: app/src/main/java/com/example/myapplication/OesFilter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/myapplication/OesFilter.java	(date 1617205648790)
+++ app/src/main/java/com/example/myapplication/OesFilter.java	(date 1617205648790)
@@ -0,0 +1,54 @@
+package com.example.myapplication;
+
+import android.content.res.Resources;
+
+import com.example.myapplication.learn.framebuffer.demo2.AFilter;
+
+
+import java.util.Arrays;
+
+import android.content.res.Resources;
+import android.opengl.GLES11Ext;
+import android.opengl.GLES20;
+
+/**
+ * Description:
+ */
+public class OesFilter extends AFilter{
+
+    private int mHCoordMatrix;
+    private float[] mCoordMatrix= Arrays.copyOf(OM,16);
+
+    public OesFilter(Resources mRes) {
+        super(mRes);
+    }
+
+    @Override
+    protected void onCreate() {
+        createProgramByAssetsFile("shader/oes.sh","shader/oes_f.sh");
+        mHCoordMatrix=GLES20.glGetUniformLocation(mProgram,"vCoordMatrix");
+    }
+
+    public void setCoordMatrix(float[] matrix){
+        this.mCoordMatrix=matrix;
+    }
+
+    @Override
+    protected void onSetExpandData() {
+        super.onSetExpandData();
+        GLES20.glUniformMatrix4fv(mHCoordMatrix,1,false,mCoordMatrix,0);
+    }
+
+    @Override
+    protected void onBindTexture() {
+        GLES20.glActiveTexture(GLES20.GL_TEXTURE0+getTextureType());
+        GLES20.glBindTexture(GLES11Ext.GL_TEXTURE_EXTERNAL_OES,getTextureId());
+        GLES20.glUniform1i(mHTexture,getTextureType());
+    }
+
+    @Override
+    protected void onSizeChanged(int width, int height) {
+
+    }
+
+}
Index: app/src/main/java/com/example/myapplication/learn/base/MySurfaceView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.myapplication.learn.base;\r\n\r\nimport android.content.Context;\r\nimport android.opengl.GLSurfaceView;\r\nimport android.util.AttributeSet;\r\nimport android.view.KeyEvent;\r\nimport android.view.MotionEvent;\r\nimport android.view.SurfaceHolder;\r\nimport android.view.View;\r\n\r\npublic class MySurfaceView extends GLSurfaceView implements View.OnTouchListener {\r\n    public MySurfaceView(Context context) {\r\n        super(context);\r\n        init();\r\n    }\r\n\r\n    private void init() {\r\n        setEGLContextClientVersion(2);\r\n        this.setOnTouchListener(this);\r\n    }\r\n\r\n    @Override\r\n    public boolean onTouch(View v, MotionEvent event) {\r\n        return false;\r\n    }\r\n\r\n    @Override\r\n    public boolean onKeyDown(int keyCode, KeyEvent event) {\r\n        return super.onKeyDown(keyCode, event);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/myapplication/learn/base/MySurfaceView.java	(revision f1c64a600a67932c68b33162f6b99c27bd73f140)
+++ app/src/main/java/com/example/myapplication/learn/base/MySurfaceView.java	(date 1617204816965)
@@ -15,7 +15,7 @@
     }
 
     private void init() {
-        setEGLContextClientVersion(2);
+        setEGLContextClientVersion(3);
         this.setOnTouchListener(this);
     }
 
Index: app/src/main/java/com/example/myapplication/ICamera.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/myapplication/ICamera.java	(date 1617232901697)
+++ app/src/main/java/com/example/myapplication/ICamera.java	(date 1617232901697)
@@ -0,0 +1,45 @@
+package com.example.myapplication;
+
+import android.graphics.Point;
+import android.graphics.SurfaceTexture;
+
+/**
+ * Description:
+ */
+public interface ICamera {
+
+    boolean open(int cameraId);
+
+    void setConfig(Config config);
+
+    boolean preview();
+
+    boolean switchTo(int cameraId);
+
+    void takePhoto(TakePhotoCallback callback);
+
+    boolean close();
+
+    void setPreviewTexture(SurfaceTexture texture);
+
+    Point getPreviewSize();
+
+    Point getPictureSize();
+
+    void setOnPreviewFrameCallback(PreviewFrameCallback callback);
+
+    class Config {
+        float rate; //宽高比
+        int minPreviewWidth;
+        int minPictureWidth;
+    }
+
+    interface TakePhotoCallback {
+        void onTakePhoto(byte[] bytes, int width, int height);
+    }
+
+    interface PreviewFrameCallback {
+        void onPreviewFrame(byte[] bytes, int width, int height);
+    }
+
+}
Index: app/src/main/java/com/example/myapplication/learn/base/MyGame.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.myapplication.learn.base;\r\n\r\nimport android.opengl.GLES20;\r\nimport android.view.View;\r\n\r\nimport com.example.myapplication.MainActivity;\r\nimport com.example.myapplication.base.core.Game;\r\nimport com.example.myapplication.base.shape.Texture;\r\nimport com.example.myapplication.learn.framebuffer.FrameBufferDemo;\r\nimport com.example.myapplication.learn.shape.Triangle;\r\nimport com.example.myapplication.learn.shape.TriangleArray;\r\nimport com.example.myapplication.learn.shape.TriangleType;\r\nimport com.example.myapplication.learn.shape.base.Shape;\r\nimport com.example.myapplication.base.shape.ChangerColorTriangleMatrix;\r\nimport com.example.myapplication.learn.texture.ImageTexture;\r\nimport com.example.myapplication.learn.texture.ImageTextureMat;\r\nimport com.example.myapplication.learn.transform.Move;\r\n\r\nimport javax.microedition.khronos.opengles.GL10;\r\n\r\n\r\npublic class MyGame extends Game {\r\n    private Shape shape;\r\n//    private CamraDemo demo;\r\n\r\n    public MyGame(MainActivity mainActivity, View view){\r\n        shape = new Move(mainActivity);\r\n//        shape = new ImageTextureClod(mainActivity);\r\n//        demo = new CamraDemo();\r\n    }\r\n\r\n    @Override\r\n    public void create() {\r\n        shape.create();\r\n//        demo.onSurfaceCreated();\r\n    }\r\n\r\n\r\n    @Override\r\n    public void render(GL10 gl) {\r\n        GLES20.glClearColor(0.5F,0.5F,0.5F,1);\r\n        GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT);\r\n        shape.render();\r\n//        demo.onDrawFrame(gl);\r\n    }\r\n\r\n\r\n    @Override\r\n    public void dispose() {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void surfaceChanage(int width, int height) {\r\n        shape.surfaceChange(width,height);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/myapplication/learn/base/MyGame.java	(revision f1c64a600a67932c68b33162f6b99c27bd73f140)
+++ app/src/main/java/com/example/myapplication/learn/base/MyGame.java	(date 1617204175418)
@@ -6,6 +6,7 @@
 import com.example.myapplication.MainActivity;
 import com.example.myapplication.base.core.Game;
 import com.example.myapplication.base.shape.Texture;
+import com.example.myapplication.learn.camra.CamraDemo;
 import com.example.myapplication.learn.framebuffer.FrameBufferDemo;
 import com.example.myapplication.learn.shape.Triangle;
 import com.example.myapplication.learn.shape.TriangleArray;
@@ -24,7 +25,7 @@
 //    private CamraDemo demo;
 
     public MyGame(MainActivity mainActivity, View view){
-        shape = new Move(mainActivity);
+        shape = new CamraDemo();
 //        shape = new ImageTextureClod(mainActivity);
 //        demo = new CamraDemo();
     }
Index: app/src/main/java/com/example/myapplication/learn/base/AndroidGraphics.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.myapplication.learn.base;\r\n\r\nimport android.opengl.GLSurfaceView;\r\nimport android.view.View;\r\nimport android.view.WindowManager;\r\n\r\nimport com.example.myapplication.MainActivity;\r\n\r\nimport javax.microedition.khronos.egl.EGLConfig;\r\nimport javax.microedition.khronos.opengles.GL10;\r\n\r\npublic class AndroidGraphics implements GLSurfaceView.Renderer{\r\n    ApplicationListener applicationListener;\r\n    private View view ;\r\n\r\n    public AndroidGraphics(MainActivity mainActivity){\r\n        mainActivity.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);\r\n        mainActivity.getWindow().clearFlags(WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN);\r\n        view = new MySurfaceView(mainActivity);\r\n        ((GLSurfaceView)(view)).setRenderer(this);\r\n        applicationListener = new MyGame(mainActivity,view);\r\n    }\r\n\r\n    @Override\r\n    public void onSurfaceCreated(GL10 gl, EGLConfig config) {\r\n        applicationListener.create();\r\n    }\r\n\r\n    @Override\r\n    public void onSurfaceChanged(GL10 gl, int width, int height) {\r\n        gl.glViewport(0,0,width,height);\r\n        applicationListener.surfaceChanage(width,height);\r\n    }\r\n\r\n    @Override\r\n    public void onDrawFrame(GL10 gl) {\r\n        applicationListener.render(gl);\r\n    }\r\n\r\n    public void onPause() {\r\n        ((GLSurfaceView)(view)).onPause();\r\n    }\r\n\r\n    public void onResume() {\r\n        if (view!=null)\r\n        ((GLSurfaceView)(view)).onResume();\r\n    }\r\n\r\n    public View getView() {\r\n        return view;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/myapplication/learn/base/AndroidGraphics.java	(revision f1c64a600a67932c68b33162f6b99c27bd73f140)
+++ app/src/main/java/com/example/myapplication/learn/base/AndroidGraphics.java	(date 1617233350018)
@@ -4,6 +4,7 @@
 import android.view.View;
 import android.view.WindowManager;
 
+import com.example.myapplication.CameraView;
 import com.example.myapplication.MainActivity;
 
 import javax.microedition.khronos.egl.EGLConfig;
@@ -17,6 +18,7 @@
         mainActivity.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
         mainActivity.getWindow().clearFlags(WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN);
         view = new MySurfaceView(mainActivity);
+//        ((GLSurfaceView)(view)).setRenderer(new CameraView(mainActivity));
         ((GLSurfaceView)(view)).setRenderer(this);
         applicationListener = new MyGame(mainActivity,view);
     }
Index: app/src/main/java/com/example/myapplication/learn/camra/CamraDemo01.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/myapplication/learn/camra/CamraDemo01.java	(date 1617233253215)
+++ app/src/main/java/com/example/myapplication/learn/camra/CamraDemo01.java	(date 1617233253215)
@@ -0,0 +1,76 @@
+package com.example.myapplication.learn.camra;
+
+import android.opengl.GLES20;
+
+import com.example.myapplication.learn.shape.base.Shape;
+
+import java.nio.ByteBuffer;
+import java.nio.ByteOrder;
+
+public class CamraDemo01 extends Shape {
+
+    private String fshader = "precision mediump float;\n" +
+            "varying vec2 textureCoordinate;\n" +
+            "uniform sampler2D vTexture;\n" +
+            "void main() {\n" +
+            "    vec4 color=texture2D( vTexture, textureCoordinate);\n" +
+            "    float rgb=color.g;\n" +
+            "    vec4 c=vec4(rgb,rgb,rgb,color.a);\n" +
+            "    gl_FragColor = c;\n" +
+            "}";
+    private String vShader = "attribute vec4 vPosition;\n" +
+            "attribute vec2 vCoord;\n" +
+            "uniform mat4 vMatrix;\n" +
+            "\n" +
+            "varying vec2 textureCoordinate;\n" +
+            "\n" +
+            "void main(){\n" +
+            "    gl_Position = vMatrix*vPosition;\n" +
+            "    textureCoordinate = vCoord;\n" +
+            "}";
+
+    @Override
+    public void create() {
+        ByteBuffer bb = ByteBuffer.allocateDirect(
+                triangleCoords.length * 4);
+        bb.order(ByteOrder.nativeOrder());
+        vertexBuffer = bb.asFloatBuffer();
+        vertexBuffer.put(triangleCoords);
+        vertexBuffer.position(0);
+        ByteBuffer byteBuffer = ByteBuffer.allocateDirect(color.length*4);
+        byteBuffer.order(ByteOrder.nativeOrder());
+        colorBuffer = byteBuffer.asFloatBuffer();
+        colorBuffer.put(color);
+        colorBuffer.position(0);
+
+        int vertexShader = loadShader(GLES20.GL_VERTEX_SHADER,vertexShaderCode);
+        int fragmentShader = loadShader(GLES20.GL_FRAGMENT_SHADER,fragmentShaderCode);
+        mProgram = GLES20.glCreateProgram();
+        GLES20.glAttachShader(mProgram,vertexShader);
+        GLES20.glAttachShader(mProgram,fragmentShader);
+        GLES20.glLinkProgram(mProgram);
+        int lin[] = new int[1];
+        GLES20.glGetProgramiv(mProgram,GLES20.GL_LINK_STATUS,lin,0);
+        if (lin[0] == 0){
+            String s = GLES20.glGetProgramInfoLog(mProgram);
+            System.out.println(s);
+        }
+        GLES20.glDeleteShader(1);
+    }
+
+    @Override
+    public void render() {
+
+
+    }
+
+    @Override
+    public void surfaceChange(int width, int height) {
+
+    }
+
+    @Override
+    public void dispose() {
+
+    }
+}
